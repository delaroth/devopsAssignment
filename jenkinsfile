pipeline {
    agent any // Runs on any available agent

    environment {
        CONSUL_KV_URL = 'http://consul:8500/v1/kv/html/config?raw=true'
        NGINX_CONTAINER_NAME = 'nginx'
        DEFAULT_DEPLOY_PATH = '/usr/share/nginx/html'
        // Temp file to pass parsed variables between stages
        PROPERTIES_FILE = 'consul_config.properties'
    }

    stages {
        stage('Fetch and Parse Consul Config') {
            steps {
                // **IMPORTANT**: This stage requires 'jq' to be installed on the Jenkins agent!
                // You might need to add 'apt-get update && apt-get install -y jq' or 'yum install -y jq'
                // to your Jenkins agent setup (e.g., Dockerfile) if it's not already present.
                sh """
                    echo "Fetching configuration from Consul (${env.CONSUL_KV_URL})..."
                    # Fetch JSON and save to a temporary file
                    curl -sSf ${env.CONSUL_KV_URL} -o config.json

                    # Verify that the fetch succeeded and the file contains data
                    if [ ! -s config.json ]; then
                        echo "ERROR: Failed to fetch configuration from Consul or received empty response."
                        # Optionally, fallback to default and write properties anyway
                        echo "Using default deployment path: ${env.DEFAULT_DEPLOY_PATH}"
                        echo "DEPLOY_PATH=${env.DEFAULT_DEPLOY_PATH}" > ${env.PROPERTIES_FILE}
                        echo "APP_ENV=unknown" >> ${env.PROPERTIES_FILE}
                        # exit 1 # Or exit if config is mandatory
                    else
                        echo "Raw JSON fetched:"
                        cat config.json

                        echo "Parsing configuration using jq..."
                        # Use jq to parse values. Provide default via // if key is null/missing in JSON.
                        # The outer || handles cases where jq fails (e.g., invalid JSON)
                        PARSED_DEPLOY_PATH=\$(jq -r '.deploy_path // "${env.DEFAULT_DEPLOY_PATH}"' config.json || echo '${env.DEFAULT_DEPLOY_PATH}')
                        PARSED_APP_ENV=\$(jq -r '.env // "unknown"' config.json || echo 'unknown')

                        # Handle jq outputting the string "null" if key exists but value is null
                        if [ "\$PARSED_DEPLOY_PATH" = "null" ]; then PARSED_DEPLOY_PATH="${env.DEFAULT_DEPLOY_PATH}"; fi
                        if [ "\$PARSED_APP_ENV" = "null" ]; then PARSED_APP_ENV="unknown"; fi

                        echo "Deployment Path determined: \$PARSED_DEPLOY_PATH"
                        echo "Environment determined: \$PARSED_APP_ENV"

                        # Write the determined values to a properties file for use in later stages
                        echo "Writing properties to ${env.PROPERTIES_FILE}..."
                        echo "DEPLOY_PATH=\${PARSED_DEPLOY_PATH}" > ${env.PROPERTIES_FILE}
                        echo "APP_ENV=\${PARSED_APP_ENV}" >> ${env.PROPERTIES_FILE}

                        echo "Properties file content:"
                        cat ${env.PROPERTIES_FILE}
                    fi

                    # Clean up the temporary JSON file
                    rm -f config.json
                """
            }
        }

        stage('Build / Prepare Web Content') {
            // (Same as before)
            steps {
                echo "Preparing web content from workspace/webApp directory..."
                sh "if [ ! -d 'webApp' ]; then echo 'ERROR: Source directory webApp not found!'; exit 1; fi"
                sh "echo 'Contents to deploy:'; ls -l webApp/"
            }
        }

        stage('Deploy to NGINX Container') {
            steps {
                script {
                    // Read the properties file created in the previous stage
                    // This requires the 'Pipeline Utility Steps' plugin for readProperties
                    // Hopefully this step *is* available, it's more common than readJSON.
                    def props = readProperties file: env.PROPERTIES_FILE
                    def deployPath = props.DEPLOY_PATH
                    // def appEnv = props.APP_ENV // You can use this value if needed

                    if (!deployPath) {
                        // This shouldn't happen if the previous stage wrote the file correctly, even with defaults
                        error "Critical error: DEPLOY_PATH could not be determined."
                    }

                    echo "Deploying using path: ${deployPath} (read from properties file)"

                    // Use docker cp command with the path read from the properties file
                    sh """
                    echo "Deploying webApp contents to NGINX container '${env.NGINX_CONTAINER_NAME}' at path '${deployPath}'..."
                    docker cp webApp/. ${env.NGINX_CONTAINER_NAME}:${deployPath}/
                    echo "Deployment to Nginx container completed!"
                    """
                }
            }
        }
    }
}
